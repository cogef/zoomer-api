# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: zoomer
# app and org for use with dashboard.serverless.com
app: zoomer
org: cogef

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript

custom:
  firebaseName: zoomer-300722

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: us-east-2

  stage: prod
  apiName: ${self:service}-${opt:stage, self:provider.stage}

  httpApi:
    cors:
      allowedOrigins: '*'
      allowedHeaders: '*'
      allowedMethods: '*'
      allowCredentials: false
      maxAge: 6000 # In seconds
    authorizers:
      zoomerJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://securetoken.google.com/${self:custom.firebaseName}
        audience:
          - ${self:custom.firebaseName}

functions:
  messages:
    handler: handler.meetings
    events:
      - httpApi:
          path: /meetings
          method: 'GET'
          authorizer:
            name: zoomerJwtAuthorizer
      - httpApi:
          path: /meetings
          method: 'POST'
          authorizer:
            name: zoomerJwtAuthorizer
      - httpApi:
          path: /meetings
          method: 'PUT'
          authorizer:
            name: zoomerJwtAuthorizer
      - httpApi:
          path: /meetings
          method: 'DELETE'
          authorizer:
            name: zoomerJwtAuthorizer
      - httpApi:
          path: /{proxy+}
          method: 'OPTIONS'
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
